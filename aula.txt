CONFIGURAÇÃO INICIAL:

inicializa o "npm init -y"
faz o repositorio "git init" e ignora os arquivos modulos do node ".gitignore > node_modules"
instala o express e mongoose "npm i express mongoose"
instala o nodemon apenas para o dev "npm i --save-dev nodemon"
cria a pasta e arquivo src/server.js
vai no package.json e cria nos scripts o "dev: nodemon src/server.js" para rodar o nodemon com o arquivo do servidor
"npm run dev" no gitbash para rodar o script "dev"
importa o express "const express = require('express')" no server.js e torna um objeto com "const app = express()"
importa o path "const path = require('path')" para usar os diretorios
habilita server para receber dados json "app.use(express.json())"
define as rotas "app.use('/api', routes)"
executa o servidor "const port = process.env.PORT || 8080
app.listen(port, () => console.log(`Server is listening on port ${port}`))"

ROTAS:
após criar o pasta/aqruivo de rotas "routes/routes.js" e importa-lo ao seu servidor "routes = require('./routes/routes')" ,
 nesse aqruivo de rota importar o .Router() "const router = require('express').Router()
exporta o modulo criado router "module.exports = router" para usar no server.js

DATABASE:
cria o arquivo/pasta database/db.js
importa o mongoose "const mongoose = require('mongoose')
config db.js:
"
    const mongoose = require('mongoose')

function connect() {

    mongoose.set('useNewUrlParser', true)
    mongoose.set('useUnifiedTopology', true)

    mongoose.connect('')

    const db = mongoose.connection

    db.once('open', () => {
        console.log('Connected to database!')
    })

    db.on('error', console.error.bind(console, 'connection error: '))

}

module.exports = {
    connect
}
"

importa no servidor o db "const db = require('./database')
nao esquecer de iniciar o db "db.connect()"

cria a tabela (pasta/arquivo) "model/product.js"
importa mongoose
cria um schema "const schema = new mongoose.Schema({ name: String, etc,})
faz o arquivo criar a tabela no mongoose "const Model = mongoose.model('nomeDaTabela', schema)
exporta a tabela "module.exports = Model"
